Microsoft (R) Macro Assembler Version 14.00.23026.0	    05/23/16 20:30:02
*Sorting Random Integers     (project5.asm		     Page 1 - 1


				TITLE Sorting Random Integers     (project5.asm)

				; Author:  Max MacEachern
				; Course / Project ID    CS 271 Project 5             Date: 5/22/2016
				; Description: This program takes a number given by user input and generates an array of random numbers with elements
				;			   equal to that that number (bounds being 100 to 999). This array is then displayed. The program then
				;              sorts the array, finds the median, and the outputs the sorted array and the median. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000A				Min		= 10
 = 000000C8				Max		= 200
 = 00000064				L		= 100
 = 000003E7				H		= 999

 00000000			.data
 00000000 53 6F 72 74 69		progName		BYTE	"Sorting Random Integers           Programmed by Max MacEachern", 0
	   6E 67 20 52 61
	   6E 64 6F 6D 20
	   49 6E 74 65 67
	   65 72 73 20 20
	   20 20 20 20 20
	   20 20 20 20 50
	   72 6F 67 72 61
	   6D 6D 65 64 20
	   62 79 20 4D 61
	   78 20 4D 61 63
	   45 61 63 68 65
	   72 6E 00
 0000003F 54 68 69 73 20		progInfo01		BYTE	"This program generates random numbers in the range [100 .. 999],", 0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   20 5B 31 30 30
	   20 2E 2E 20 39
	   39 39 5D 2C 00
 00000080 64 69 73 70 6C		progInfo02		BYTE	"displays the original list, sorts the list, and calculates the", 0
	   61 79 73 20 74
	   68 65 20 6F 72
	   69 67 69 6E 61
	   6C 20 6C 69 73
	   74 2C 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 2C 20 61
	   6E 64 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 74
	   68 65 00
 000000BF 6D 65 64 69 61		progInfo03		BYTE	"median value. Finally, it displays the list sorted in descending order.", 0
	   6E 20 76 61 6C
	   75 65 2E 20 46
	   69 6E 61 6C 6C
	   79 2C 20 69 74
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6C
	   69 73 74 20 73
	   6F 72 74 65 64
	   20 69 6E 20 64
	   65 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2E 00
 00000107 48 6F 77 20 6D		rangeInput		BYTE	"How many numbers should be generated? Pick between [10 .. 200]: ", 0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 50 69
	   63 6B 20 62 65
	   74 77 65 65 6E
	   20 5B 31 30 20
	   2E 2E 20 32 30
	   30 5D 3A 20 00
 00000148 54 68 65 20 6E		errorLow		BYTE	"The number you entered is too low, please try again.",0
	   75 6D 62 65 72
	   20 79 6F 75 20
	   65 6E 74 65 72
	   65 64 20 69 73
	   20 74 6F 6F 20
	   6C 6F 77 2C 20
	   70 6C 65 61 73
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 2E 00
 0000017D 54 68 65 20 6E		errorHigh		BYTE	"The number you entered is too high, please try again.",0
	   75 6D 62 65 72
	   20 79 6F 75 20
	   65 6E 74 65 72
	   65 64 20 69 73
	   20 74 6F 6F 20
	   68 69 67 68 2C
	   20 70 6C 65 61
	   73 65 20 74 72
	   79 20 61 67 61
	   69 6E 2E 00
 000001B3 54 68 65 20 75		unSortMsg		BYTE	"The unsorted random numbers are: ", 0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 61 72
	   65 3A 20 00
 000001D5 54 68 65 20 6D		medianMsg		BYTE	"The median is ", 0
	   65 64 69 61 6E
	   20 69 73 20 00
 000001E4 54 68 65 20 73		sortedMsg		BYTE	"The sorted list is:", 0
	   6F 72 74 65 64
	   20 6C 69 73 74
	   20 69 73 3A 00
 000001F8 20 20 20 00			spacing			BYTE	"   ", 0
 000001FC 00000000			userInput		DWORD	?
 00000200  000000C8 [			inputArray		DWORD	Max DUP(?)
	    00000000
	   ]

 00000000			.code
 00000000			main PROC
					
					;Call randomize only once, from main
 00000000  E8 00000000 E		call	Randomize	

					;Welcome the user
 00000005  E8 00000093			call	introduction

					;Grab user input by reference to build array from
 0000000A  68 000001FC R		push	OFFSET userInput	
 0000000F  E8 000000D5			call	getData

					;Populate the array with random numbers
 00000014  68 00000200 R		push	OFFSET inputArray	
 00000019  FF 35 000001FC R		push	userInput			
 0000001F  E8 00000111			call	fillArray

					;Display the unsorted array array
 00000024  BA 000001B3 R		mov		edx, OFFSET unSortMsg
 00000029  E8 00000000 E		call	WriteString
 0000002E  E8 00000000 E		call	CrLf
 00000033  68 00000200 R		push	OFFSET inputArray
 00000038  FF 35 000001FC R		push	userInput
 0000003E  E8 00000117			call	displayList
 00000043  E8 00000000 E		call	CrLf
 00000048  E8 00000000 E		call    CrLf

					;Sort the array
 0000004D  68 00000200 R		push	OFFSET inputArray	
 00000052  FF 35 000001FC R		push	userInput			
 00000058  E8 00000135			call	sortList

					;Calculate the median value in the array
 0000005D  68 00000200 R		push	OFFSET inputArray	
 00000062  FF 35 000001FC R		push	userInput			
 00000068  68 000001D5 R		push	OFFSET medianMsg		
 0000006D  E8 0000016F			call	displayMedian

					;Display the sorted array
 00000072  E8 00000000 E		call	CrLf
 00000077  BA 000001E4 R		mov		edx, OFFSET sortedMsg
 0000007C  E8 00000000 E		call	WriteString
 00000081  E8 00000000 E		call	CrLf
 00000086  68 00000200 R		push	OFFSET inputArray
 0000008B  FF 35 000001FC R		push	userInput
 00000091  E8 000000C4			call	displayList

					exit	; exit to operating system
 00000096  6A 00	   *	    push   +000000000h
 00000098  E8 00000000 E   *	    call   ExitProcess
 0000009D			main ENDP
				; ******************************************************************************************************
				; INTRODUCTION PROCEDURE
				; Description :		 Procedure to give the user instructions and an introduction to the program.
				; ******************************************************************************************************

 0000009D			introduction	PROC
					;Outputs the name of the project and the author
 0000009D  E8 00000000 E		call	 CrLf
 000000A2  BA 00000000 R		mov		 edx, OFFSET progName
 000000A7  E8 00000000 E		call	 WriteString
 000000AC  E8 00000000 E		call	 CrLf
 000000B1  E8 00000000 E		call	 CrLF

					;Gives the user instructions
 000000B6  BA 0000003F R		mov		edx, OFFSET progInfo01
 000000BB  E8 00000000 E		call	WriteString
 000000C0  E8 00000000 E		call	CrLF
 000000C5  BA 00000080 R		mov		edx, OFFSET progInfo02
 000000CA  E8 00000000 E		call	WriteString
 000000CF  E8 00000000 E		call	CrLf
 000000D4  BA 000000BF R		mov		edx, OFFSET progInfo03
 000000D9  E8 00000000 E		call	WriteString
 000000DE  E8 00000000 E		call	CrLf
 000000E3  E8 00000000 E		call	CrLF
 000000E8  C3				ret

 000000E9			introduction	ENDP

				; ******************************************************************************************************
				; getData PROCEDURE
				; Description :	Gets the data from the user and validates if it is too low or too high
				; ******************************************************************************************************

 000000E9			getData		PROC
					
					;Stack initialization
 000000E9  55					push	ebp
 000000EA  8B EC				mov		ebp, esp
 000000EC  8B 5C 24 08				mov		ebx, [esp+8] ; get address of request into ebx, per lecture

 000000F0				userInputLoop:
 000000F0  BA 00000107 R			mov		edx, OFFSET rangeInput		;access by reference
 000000F5  E8 00000000 E			call	WriteString
 000000FA  E8 00000000 E			call	ReadInt
 000000FF  89 03				mov		[ebx], eax
 00000101  83 F8 0A				cmp		eax, Min
 00000104  72 09				jb		tooLow						;If input was less than the minimum
 00000106  3D 000000C8				cmp		eax, Max
 0000010B  7F 13				jg		tooHigh						;If input was more than the maximum
 0000010D  EB 22				jmp		valid

 0000010F				tooLow:
 0000010F  BA 00000148 R			mov		edx, OFFSET errorLow		;access by reference
 00000114  E8 00000000 E			call	WriteString
 00000119  E8 00000000 E			call	CrLf
 0000011E  EB D0				jmp		userInputLoop

 00000120				tooHigh:
 00000120  BA 0000017D R			mov		edx, OFFSET errorHigh		;access by reference
 00000125  E8 00000000 E			call	WriteString
 0000012A  E8 00000000 E			call	CrLf
 0000012F  EB BF				jmp		userInputLoop

					;If user data is valid, clean up the stack
 00000131				valid:
 00000131  5D					pop		ebp
 00000132  C2 0004				ret		4

 00000135			getData		ENDP

				; ******************************************************************************************************
				; fillArray PROCEDURE
				; Description :	Fills the array with pseudorandom numbers using RandomRange
				; ******************************************************************************************************

 00000135			fillArray PROC
						;Stack and array initialization
 00000135  55					push	ebp
 00000136  8B EC				mov		ebp, esp
 00000138  8B 75 0C				mov		esi, [ebp+12]	;at the array
 0000013B  8B 4D 08				mov		ecx, [ebp+8]	;loop control

					;Add numbers to the array as long a as there is space
 0000013E				fillLoop:
 0000013E  B8 000003E7				mov		eax, H
 00000143  83 E8 64				sub		eax, L
 00000146  40					inc		eax
 00000147  E8 00000000 E			call	RandomRange	;used to get a random number
 0000014C  83 C0 64				add		eax, L
 0000014F  89 06				mov		[esi], eax  ;adds a random number to the array
 00000151  83 C6 04				add		esi, 4		;goes to the next element
 00000154  E2 E8				loop	fillLoop

						;Clean up the stack
 00000156  5D					pop		ebp
 00000157  C2 0008				ret		8

 0000015A			fillArray ENDP

				; ******************************************************************************************************
				; displayList PROCEDURE
				; Description :	Displays the contents of the array to the user. Works for either sorted or unsorted
				; ******************************************************************************************************

 0000015A			displayList PROC
 0000015A  55					push	ebp
 0000015B  8B EC				mov		ebp, esp
 0000015D  BB 00000000				mov		ebx, 0						; counting for number spacing
 00000162  8B 75 0C				mov		esi, [ebp + 12]				; at array
 00000165  8B 4D 08				mov		ecx, [ebp + 8]				; loop control
 00000168				displayLoop:
 00000168  8B 06				mov		eax, [esi]					;this grabs the current number
 0000016A  E8 00000000 E			call	WriteDec
 0000016F  BA 000001F8 R			mov		edx, OFFSET spacing			;adds spacing to output
 00000174  E8 00000000 E			call	WriteString
 00000179  43					inc		ebx
 0000017A  83 FB 0A				cmp		ebx, 10						;Checks for new line
 0000017D  7C 0A				jl		nextLine
 0000017F  E8 00000000 E			call	CrLf
 00000184  BB 00000000				mov		ebx,0
 00000189				nextLine:
 00000189  83 C6 04				add		esi, 4						; next element
 0000018C  E2 DA				loop	displayLoop
 0000018E				endDisplayLoop:
 0000018E  5D					pop		ebp
 0000018F  C2 0008				ret		8
 00000192			displayList ENDP

				; ******************************************************************************************************
				; sortList PROCEDURE
				; Description :	Sorts the array using Selection Sort algorithm as described in class directions
				; ******************************************************************************************************

 00000192			sortList PROC
					;Stack initialization
 00000192  60					pushad
 00000193  8B EC				mov		ebp, esp
 00000195  8B 4D 24				mov		ecx, [ebp+36]
 00000198  8B 7D 28				mov		edi, [ebp+40]
 0000019B  49					dec 	ecx 			;decrements the user input value
 0000019C  BB 00000000				mov		ebx, 0

					;The first for loop in the algorithm
 000001A1				firstForLoop:
 000001A1  8B C3				mov		eax, ebx		;array[i]=[k]
 000001A3  8B D0				mov		edx, eax
 000001A5  42					inc 	edx 			;[j]=[k+1]
 000001A6  51					push 	ecx
 000001A7  8B 4D 24				mov 	ecx, [ebp+36]	;goes back to user input value

					;The second for loop in the algorithm
 000001AA				secondForLoop:
 000001AA  8B 34 97				mov		esi, [edi+edx*4]
 000001AD  3B 34 87				cmp		esi, [edi+eax*4]
 000001B0  7E 02				jle		Skip
 000001B2  8B C2				mov		eax, edx

					;If not greater, skip to the next comparison
 000001B4				Skip:
 000001B4  42					inc 	edx
 000001B5  E2 F3				loop 	secondForLoop

					;If they are greater, make the swap
 000001B7  8D 34 9F				lea 	esi, [edi+ebx*4]
 000001BA  56					push 	esi
 000001BB  8D 34 87				lea 	esi, [edi+eax*4]
 000001BE  56					push 	esi
 000001BF  E8 00000008				call 	exchange
 000001C4  59					pop 	ecx
 000001C5  43					inc 	ebx
 000001C6  E2 D9				loop 	firstForLoop
 000001C8  61					popad
 000001C9  C2 0008				ret 	8

 000001CC			sortList ENDP

				; ******************************************************************************************************
				; exchange PROCEDURE
				; Description :	This procedure swaps the values of two elements of the array
				; ******************************************************************************************************

 000001CC			exchange PROC
 000001CC  60					pushad
 000001CD  8B EC				mov 	ebp, esp
 000001CF  8B 45 28				mov 	eax, [ebp+40] 		;lower ordered value in the array
 000001D2  8B 08				mov 	ecx, [eax]
 000001D4  8B 5D 24				mov 	ebx, [ebp+36] 		;higher ordered value in the array
 000001D7  8B 13				mov		edx, [ebx]
 000001D9  89 10				mov		[eax], edx
 000001DB  89 0B				mov 	[ebx], ecx
 000001DD  61					popad
 000001DE  C2 0008				ret 	8					;clean stack

 000001E1			exchange ENDP

				; ******************************************************************************************************
				; displayMedian PROCEDURE
				; Description :	Both calculates and displays the median value of the array
				; ******************************************************************************************************

 000001E1			displayMedian PROC
					;Stack initialization
 000001E1  60					pushad
 000001E2  8B EC				mov     ebp, esp
 000001E4  8B 7D 2C				mov     edi, [ebp+44]

					;Print output information
 000001E7  8B 55 24				mov     edx, [ebp+36]
 000001EA  E8 00000000 E			call    WriteString

					;Calculate the median value
 000001EF  8B 45 28				mov     eax, [ebp+40]
 000001F2  99					cdq
 000001F3  BB 00000002				mov     ebx, 2
 000001F8  F7 F3				div     ebx
 000001FA  C1 E0 02				shl     eax, 2
 000001FD  03 F8				add     edi, eax
 000001FF  83 FA 00				cmp     edx, 0
 00000202  75 19				jnz     OddNumber

					;If Even     
 00000204  8B 07				mov     eax, [edi]
 00000206  03 47 FC				add     eax, [edi-4]
 00000209  99					cdq     
 0000020A  BB 00000002				mov     ebx, 2
 0000020F  F7 F3				div     ebx
 00000211  E8 00000000 E			call    WriteDec
 00000216  E8 00000000 E			call    CrLf
 0000021B  EB 0E				jmp		endDisMedian
					

					;If Odd 
 0000021D				OddNumber:
 0000021D  8B 07				mov     eax, [edi]
 0000021F  E8 00000000 E			call    writeDec
 00000224  E8 00000000 E			call    CrLf
 00000229  EB 00				jmp     endDisMedian

					;Clear stack
 0000022B				endDisMedian:
 0000022B  61					popad
 0000022C  C2 000C				ret 12

 0000022F			displayMedian ENDP


				END main
Microsoft (R) Macro Assembler Version 14.00.23026.0	    05/23/16 20:30:02
*Sorting Random Integers     (project5.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000520 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000022F Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayList  . . . . . . . . . .	P Near	 0000015A _TEXT	Length= 00000038 Public STDCALL
  displayLoop  . . . . . . . . .	L Near	 00000168 _TEXT	
  nextLine . . . . . . . . . . .	L Near	 00000189 _TEXT	
  endDisplayLoop . . . . . . . .	L Near	 0000018E _TEXT	
displayMedian  . . . . . . . . .	P Near	 000001E1 _TEXT	Length= 0000004E Public STDCALL
  OddNumber  . . . . . . . . . .	L Near	 0000021D _TEXT	
  endDisMedian . . . . . . . . .	L Near	 0000022B _TEXT	
exchange . . . . . . . . . . . .	P Near	 000001CC _TEXT	Length= 00000015 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 00000135 _TEXT	Length= 00000025 Public STDCALL
  fillLoop . . . . . . . . . . .	L Near	 0000013E _TEXT	
getData  . . . . . . . . . . . .	P Near	 000000E9 _TEXT	Length= 0000004C Public STDCALL
  userInputLoop  . . . . . . . .	L Near	 000000F0 _TEXT	
  tooLow . . . . . . . . . . . .	L Near	 0000010F _TEXT	
  tooHigh  . . . . . . . . . . .	L Near	 00000120 _TEXT	
  valid  . . . . . . . . . . . .	L Near	 00000131 _TEXT	
introduction . . . . . . . . . .	P Near	 0000009D _TEXT	Length= 0000004C Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000009D Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000192 _TEXT	Length= 0000003A Public STDCALL
  firstForLoop . . . . . . . . .	L Near	 000001A1 _TEXT	
  secondForLoop  . . . . . . . .	L Near	 000001AA _TEXT	
  Skip . . . . . . . . . . . . .	L Near	 000001B4 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
H  . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
L  . . . . . . . . . . . . . . .	Number	 00000064h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
Max  . . . . . . . . . . . . . .	Number	 000000C8h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
Min  . . . . . . . . . . . . . .	Number	 0000000Ah   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorHigh  . . . . . . . . . . .	Byte	 0000017D _DATA	
errorLow . . . . . . . . . . . .	Byte	 00000148 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputArray . . . . . . . . . . .	DWord	 00000200 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianMsg  . . . . . . . . . . .	Byte	 000001D5 _DATA	
progInfo01 . . . . . . . . . . .	Byte	 0000003F _DATA	
progInfo02 . . . . . . . . . . .	Byte	 00000080 _DATA	
progInfo03 . . . . . . . . . . .	Byte	 000000BF _DATA	
progName . . . . . . . . . . . .	Byte	 00000000 _DATA	
rangeInput . . . . . . . . . . .	Byte	 00000107 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sortedMsg  . . . . . . . . . . .	Byte	 000001E4 _DATA	
spacing  . . . . . . . . . . . .	Byte	 000001F8 _DATA	
unSortMsg  . . . . . . . . . . .	Byte	 000001B3 _DATA	
userInput  . . . . . . . . . . .	DWord	 000001FC _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
