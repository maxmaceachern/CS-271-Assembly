Microsoft (R) Macro Assembler Version 14.00.23026.0	    06/03/16 09:42:50
-Programming Assignment 6A     (project6a.asm		     Page 1 - 1


				TITLE Programming Assignment 6A     (project6a.asm)

				; Author: Max MacEachern
				; Course / Project ID  CS 271               Date: 6/5/16
				; Description: This program takes in user input as a string and outputs the numberic form using written ReadVal and WriteVal.
				;			   If the numbers are signed or if they are too large, error handling will occur.
				;			   The sum and average of the inputted numbers will be calculated and displayed to the user.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


 00000000			.data

				; (insert variable definitions here)
 00000000 50 52 4F 47 52	introduction01		BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures, written by Max MacEachern",0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   2C 20 77 72 69
	   74 74 65 6E 20
	   62 79 20 4D 61
	   78 20 4D 61 63
	   45 61 63 68 65
	   72 6E 00
 00000058 50 6C 65 61 73	introduction02		BYTE	"Please provide 10 unsigned decimal integers.",0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 75 6E
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 73 2E 00
 00000085 45 61 63 68 20	introduction03		BYTE	"Each number needs to be small enough to fit inside a 32 bit register.",0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 00
 000000CB 41 66 74 65 72	introduction04		BYTE	"After you've finished inputting the raw numbers I will display a list of the integers, their sum, and their average value.", 0
	   20 79 6F 75 27
	   76 65 20 66 69
	   6E 69 73 68 65
	   64 20 69 6E 70
	   75 74 74 69 6E
	   67 20 74 68 65
	   20 72 61 77 20
	   6E 75 6D 62 65
	   72 73 20 49 20
	   77 69 6C 6C 20
	   64 69 73 70 6C
	   61 79 20 61 20
	   6C 69 73 74 20
	   6F 66 20 74 68
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 00
 00000146 50 6C 65 61 73	numPrompt			BYTE	"Please enter an unsigned number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 75 6E 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 3A 20 00
 00000168 45 52 52 4F 52	errorPromptHigh		BYTE	"ERROR: YOUR NUMBER WAS TOO BIG SO I AM GOING TO YELL AT YOU IN ALL CAPS! TRY AGAIN: ",0
	   3A 20 59 4F 55
	   52 20 4E 55 4D
	   42 45 52 20 57
	   41 53 20 54 4F
	   4F 20 42 49 47
	   20 53 4F 20 49
	   20 41 4D 20 47
	   4F 49 4E 47 20
	   54 4F 20 59 45
	   4C 4C 20 41 54
	   20 59 4F 55 20
	   49 4E 20 41 4C
	   4C 20 43 41 50
	   53 21 20 54 52
	   59 20 41 47 41
	   49 4E 3A 20 00
 000001BD 45 52 52 4F 52	errorPromptNotUS	BYTE	"ERROR: YOU DID NOT ENTER AN UNSIGNED NUMBER SO I AM GOING TO YELL AT YOU IN ALL CAPS! TRY AGAIN: ",0
	   3A 20 59 4F 55
	   20 44 49 44 20
	   4E 4F 54 20 45
	   4E 54 45 52 20
	   41 4E 20 55 4E
	   53 49 47 4E 45
	   44 20 4E 55 4D
	   42 45 52 20 53
	   4F 20 49 20 41
	   4D 20 47 4F 49
	   4E 47 20 54 4F
	   20 59 45 4C 4C
	   20 41 54 20 59
	   4F 55 20 49 4E
	   20 41 4C 4C 20
	   43 41 50 53 21
	   20 54 52 59 20
	   41 47 41 49 4E
	   3A 20 00
 0000021F 59 6F 75 20 65	inputFeedback		BYTE	"You entered the following numbers:",0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 00
 00000242 54 68 65 20 73	sumFeedback			BYTE	"The sum of these numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000260 54 68 65 20 61	aveFeedback			BYTE	"The average is: ",0
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 00000271 54 68 61 6E 6B	closingMessage		BYTE	"Thanks for playing!",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00
 00000285  000000FF [		strbuffer			BYTE	255 DUP(0)
	    00
	   ]
 00000384  00000010 [		stringTemp			DB		16 DUP(0)
	    00
	   ]
 00000394 2C 20 00		comma				BYTE	", ",0
 00000397 00000000		sum					DWORD	?
 0000039B 00000000		ave					DWORD	?
 0000039F  0000000A [		listArr				DWORD	10 DUP(0)
	    00000000
	   ]

				; ******************************************************************************************************
				; getString MACRO
				; Description :		 Used to read the input string from the user
				; ******************************************************************************************************
				getString	MACRO add, len	
					push	edx
					push	ecx
					mov  	edx, add
					mov  	ecx, len
					call 	ReadString
					pop		ecx
					pop		edx
				ENDM

				; ******************************************************************************************************
				; displayString MACRO
				; Description :		 Used to output a string
				; ******************************************************************************************************
				displayString	MACRO	disString
					push	edx
					mov		edx, OFFSET disString
					call	WriteString
					pop		edx
				ENDM


 00000000			.code
 00000000			main PROC

					;Call intoduction message
 00000000  E8 0000002A			call	intro
					
					;Set up loop controls
 00000005  B9 0000000A			mov		ecx, 10
 0000000A  BF 0000039F R		mov		edi, OFFSET listArr

					;Call input procedure
 0000000F  E8 00000115			call userInput

					;Call array output procedure to display entered array to the user
 00000014  E8 00000137			call disArray

					;Call procedure to calculate sum
 00000019  E8 00000152			call calcSum

					;Call procedure to calculate average
 0000001E  E8 00000195			call calcAverage

					;Say goodbye to the user
 00000023  E8 000001D9			call	goodBye

					exit	; exit to operating system
 00000028  6A 00	   *	    push   +000000000h
 0000002A  E8 00000000 E   *	    call   ExitProcess
 0000002F			main ENDP

				; ******************************************************************************************************
				; intro PROCEDURE
				; Description :	Simply displays the instructions to the user
				; ******************************************************************************************************
 0000002F			intro PROC
					displayString	introduction01
 0000002F  52		     1		push	edx
 00000030  BA 00000000 R     1		mov		edx, OFFSET introduction01
 00000035  E8 00000000 E     1		call	WriteString
 0000003A  5A		     1		pop		edx
 0000003B  E8 00000000 E		call	CrLf
					displayString	introduction02
 00000040  52		     1		push	edx
 00000041  BA 00000058 R     1		mov		edx, OFFSET introduction02
 00000046  E8 00000000 E     1		call	WriteString
 0000004B  5A		     1		pop		edx
 0000004C  E8 00000000 E		call	CrLf
					displayString	introduction03
 00000051  52		     1		push	edx
 00000052  BA 00000085 R     1		mov		edx, OFFSET introduction03
 00000057  E8 00000000 E     1		call	WriteString
 0000005C  5A		     1		pop		edx
 0000005D  E8 00000000 E		call	CrLf
					displayString	introduction04
 00000062  52		     1		push	edx
 00000063  BA 000000CB R     1		mov		edx, OFFSET introduction04
 00000068  E8 00000000 E     1		call	WriteString
 0000006D  5A		     1		pop		edx
 0000006E  E8 00000000 E		call	CrLf
 00000073  E8 00000000 E		call	CrLf
 00000078			intro ENDP

				; ******************************************************************************************************
				; readVal PROCEDURE
				; Description :	Procedure to get and validate user input in the form of a string and converts it to
				;				a number. Utilizes the getString macro to do so.
				; ******************************************************************************************************
 00000078			readVal PROC
 00000078  55				push	ebp
 00000079  8B EC			mov		ebp, esp
 0000007B  60				pushad

 0000007C			InputLoop:
 0000007C  8B 55 0C			mov		edx, [ebp+12]	;strbuffer is located here in the stack
 0000007F  8B 4D 08			mov		ecx, [ebp+8]	;size of strbuffer

					getString	edx, ecx	;Read input from user
 00000082  52		     1		push	edx
 00000083  51		     1		push	ecx
 00000084  8B D2	     1		mov  	edx, edx
 00000086  8B C9	     1		mov  	ecx, ecx
 00000088  E8 00000000 E     1		call 	ReadString
 0000008D  59		     1		pop		ecx
 0000008E  5A		     1		pop		edx

 0000008F  8B F2			mov		esi, edx		;Set up registers to do the validation
 00000091  B8 00000000			mov		eax, 0
 00000096  B9 00000000			mov		ecx, 0
 0000009B  BB 0000000A			mov		ebx, 10

 000000A0			LoadString:
 000000A0  AC				lodsb					;Grab what is stored at esi
 000000A1  66| 83 F8 00			cmp		ax, 0			;Used to determine if at the end of the string
 000000A5  74 38			je		Finished

 000000A7  66| 83 F8 39			cmp		ax, 57			;Check if nine in ASCII
 000000AB  77 11			ja		ErrorTooHigh
 000000AD  66| 83 F8 30			cmp		ax, 48			;Check if zero in ASCII
 000000B1  72 19			jb		ErrorNotUS
					
 000000B3  66| 83 E8 30			sub		ax, 48
 000000B7  91				xchg	eax, ecx		;swap eax, ecx
 000000B8  F7 E3			mul		ebx				;used to find the correct number
 000000BA  72 02			jc		ErrorTooHigh
 000000BC  73 1C			jnc		Validated

 000000BE			ErrorTooHigh:
					displayString	errorPromptHigh
 000000BE  52		     1		push	edx
 000000BF  BA 00000168 R     1		mov		edx, OFFSET errorPromptHigh
 000000C4  E8 00000000 E     1		call	WriteString
 000000C9  5A		     1		pop		edx
 000000CA  EB B0			jmp				InputLoop

 000000CC			ErrorNotUS:
					displayString	errorPromptNotUS
 000000CC  52		     1		push	edx
 000000CD  BA 000001BD R     1		mov		edx, OFFSET errorPromptNotUS
 000000D2  E8 00000000 E     1		call	WriteString
 000000D7  5A		     1		pop		edx
 000000D8  EB A2			jmp				InputLoop

 000000DA			Validated:
 000000DA  03 C1			add		eax, ecx
 000000DC  91				xchg	eax, ecx		;Reset for the next iteration of the loop
 000000DD  EB C1			jmp		LoadString		;Go back to the beginning of the loop
					
 000000DF			Finished:
 000000DF  91				xchg	ecx, eax
 000000E0  A3 00000285 R		mov		DWORD PTR strbuffer, eax	;Save variable
 000000E5  61				popad
 000000E6  5D				pop ebp
 000000E7  C2 0008			ret 8
 000000EA			readVal ENDP

				; ******************************************************************************************************
				; writeVal PROCEDURE
				; Description :	Used to convert the interger to the string and output it to the user.
				; ******************************************************************************************************
 000000EA			writeVal PROC
 000000EA  55				push	ebp
 000000EB  8B EC			mov		ebp, esp
 000000ED  60				pushad		

				;Set for looping through the integer
 000000EE  8B 45 0C			mov		eax, [ebp+12]	;move to interact with input to convert to string
 000000F1  8B 7D 08			mov		edi, [ebp+8]	;store address
 000000F4  BB 0000000A			mov		ebx, 10
 000000F9  6A 00			push	0

 000000FB			ConvertLoop:
 000000FB  BA 00000000			mov		edx, 0
 00000100  F7 F3			div		ebx
 00000102  83 C2 30			add		edx, 48
 00000105  52				push	edx				;push next digit onto stack

 00000106  83 F8 00			cmp		eax, 0			;Used to check if at the end
 00000109  75 F0			jne		ConvertLoop

 0000010B			PopLoop:
 0000010B  8F 07			pop		[edi]			;Pop number off the stack
 0000010D  8B 07			mov		eax, [edi]
 0000010F  47				inc		edi
 00000110  83 F8 00			cmp		eax, 0			;Used to check if at the end
 00000113  75 F6			jne		PopLoop

 00000115  8B 55 08			mov				edx, [ebp+8]
					displayString	OFFSET stringTemp		;Write string using the displayString macro
 00000118  52		     1		push	edx
 00000119  BA 00000384 R     1		mov		edx, OFFSET OFFSET stringTemp
 0000011E  E8 00000000 E     1		call	WriteString
 00000123  5A		     1		pop		edx

 00000124  61				popad					;restore the registers to their original state
 00000125  5D				pop ebp
 00000126  C2 0008			ret 8
 00000129			writeVal ENDP


				; ******************************************************************************************************
				; userInput PROCEDURE
				; Description :	Used to take in 10 numbers provided by the user and work with the data
				; ******************************************************************************************************
 00000129			userInput PROC

 00000129			InputLoop:
					displayString	numPrompt
 00000129  52		     1		push	edx
 0000012A  BA 00000146 R     1		mov		edx, OFFSET numPrompt
 0000012F  E8 00000000 E     1		call	WriteString
 00000134  5A		     1		pop		edx

 00000135  68 00000285 R		push	OFFSET strbuffer
 0000013A  68 000000FF			push	SIZEOF strbuffer
 0000013F  E8 FFFFFF34			call	ReadVal


 00000144  A1 00000285 R		mov		eax, DWORD PTR strbuffer	
 00000149  89 07			mov		[edi], eax
 0000014B  83 C7 04			add		edi, 4						;Next element in the array

 0000014E  E2 D9			loop	InputLoop
 00000150			userInput ENDP

				; ******************************************************************************************************
				; disArray PROCEDURE
				; Description :	Used to display the array to the user
				; ******************************************************************************************************
 00000150			disArray PROC

 00000150  B9 0000000A			mov		ecx, 10					;Setting loop variables
 00000155  BE 0000039F R		mov		esi, OFFSET listArr		;Setting loop variables
 0000015A  BB 00000000			mov		ebx, 0					;Used in the calculation of the sum

					displayString	inputFeedback
 0000015F  52		     1		push	edx
 00000160  BA 0000021F R     1		mov		edx, OFFSET inputFeedback
 00000165  E8 00000000 E     1		call	WriteString
 0000016A  5A		     1		pop		edx
 0000016B  E8 00000000 E		call			CrLf
 00000170			disArray ENDP

				; ******************************************************************************************************
				; calcSum PROCEDURE
				; Description :	Used to calculate and display the sum of the array to the user
				; ******************************************************************************************************
 00000170			calcSum PROC
 00000170			SumLoop:
 00000170  8B 06			mov		eax, [esi]
 00000172  03 D8			add		ebx, eax				;Add element to the sum

 00000174  50				push	eax						;Push WriteVal parameters
 00000175  68 00000384 R		push	OFFSET stringTemp		;Push WriteVal parameters
 0000017A  E8 FFFFFF6B			call	WriteVal
 0000017F  83 C6 04			add		esi, 4					;Increment the loop
					displayString	OFFSET comma	;Add commas to the list of numbers
 00000182  52		     1		push	edx
 00000183  BA 00000394 R     1		mov		edx, OFFSET OFFSET comma
 00000188  E8 00000000 E     1		call	WriteString
 0000018D  5A		     1		pop		edx
 0000018E  E2 E0			loop	SumLoop

 00000190  8B C3			mov				eax, ebx
 00000192  A3 00000397 R		mov				sum, eax
					displayString	sumFeedback		;Displays the sum
 00000197  52		     1		push	edx
 00000198  BA 00000242 R     1		mov		edx, OFFSET sumFeedback
 0000019D  E8 00000000 E     1		call	WriteString
 000001A2  5A		     1		pop		edx

 000001A3  FF 35 00000397 R		push	sum
 000001A9  68 00000384 R		push	OFFSET stringTemp
 000001AE  E8 FFFFFF37			call	WriteVal
 000001B3  E8 00000000 E		call	CrLf
 000001B8			calcSum ENDP

				; ******************************************************************************************************
				; calcAverage PROCEDURE
				; Description :	Used to calculate and display the average of array to the user
				; ******************************************************************************************************
 000001B8			calcAverage PROC

 000001B8  BB 0000000A			mov		ebx, 10			;Loop counter
 000001BD  BA 00000000			mov		edx, 0			;Reset edx

 000001C2  F7 F3			div		ebx				;Divide by 10 to get the average

 000001C4  8B C8			mov		ecx, eax
 000001C6  8B C2			mov		eax, edx
 000001C8  BA 00000002			mov		edx, 2
 000001CD  F7 E2			mul		edx
 000001CF  3B C3			cmp		eax, ebx		;Determine if rounding needs to occur
 000001D1  8B C1			mov		eax, ecx
 000001D3  A3 0000039B R		mov		ave, eax
 000001D8  72 06			jb		EvenNum
 000001DA  40				inc		eax
 000001DB  A3 0000039B R		mov		ave, eax

 000001E0			EvenNum:
					displayString	aveFeedback
 000001E0  52		     1		push	edx
 000001E1  BA 00000260 R     1		mov		edx, OFFSET aveFeedback
 000001E6  E8 00000000 E     1		call	WriteString
 000001EB  5A		     1		pop		edx

 000001EC  FF 35 0000039B R		push	ave
 000001F2  68 00000384 R		push	OFFSET stringTemp
 000001F7  E8 FFFFFEEE			call	WriteVal
 000001FC  E8 00000000 E		call	CrLf

 00000201			calcAverage ENDP

				; ******************************************************************************************************
				; goodBye PROCEDURE
				; Description :	Say goodbye the the user!
				; ******************************************************************************************************
 00000201			goodBye PROC
					displayString	closingMessage
 00000201  52		     1		push	edx
 00000202  BA 00000271 R     1		mov		edx, OFFSET closingMessage
 00000207  E8 00000000 E     1		call	WriteString
 0000020C  5A		     1		pop		edx
 0000020D  E8 00000000 E		call	CrLf
 00000212  C3				ret
 00000213			goodBYE ENDP


				END main
Microsoft (R) Macro Assembler Version 14.00.23026.0	    06/03/16 09:42:50
-Programming Assignment 6A     (project6a.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003C7 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000213 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calcAverage  . . . . . . . . . .	P Near	 000001B8 _TEXT	Length= 00000049 Public STDCALL
  EvenNum  . . . . . . . . . . .	L Near	 000001E0 _TEXT	
calcSum  . . . . . . . . . . . .	P Near	 00000170 _TEXT	Length= 00000048 Public STDCALL
  SumLoop  . . . . . . . . . . .	L Near	 00000170 _TEXT	
disArray . . . . . . . . . . . .	P Near	 00000150 _TEXT	Length= 00000020 Public STDCALL
goodBye  . . . . . . . . . . . .	P Near	 00000201 _TEXT	Length= 00000012 Public STDCALL
intro  . . . . . . . . . . . . .	P Near	 0000002F _TEXT	Length= 00000049 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000002F Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 00000078 _TEXT	Length= 00000072 Public STDCALL
  InputLoop  . . . . . . . . . .	L Near	 0000007C _TEXT	
  LoadString . . . . . . . . . .	L Near	 000000A0 _TEXT	
  ErrorTooHigh . . . . . . . . .	L Near	 000000BE _TEXT	
  ErrorNotUS . . . . . . . . . .	L Near	 000000CC _TEXT	
  Validated  . . . . . . . . . .	L Near	 000000DA _TEXT	
  Finished . . . . . . . . . . .	L Near	 000000DF _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
userInput  . . . . . . . . . . .	P Near	 00000129 _TEXT	Length= 00000027 Public STDCALL
  InputLoop  . . . . . . . . . .	L Near	 00000129 _TEXT	
writeVal . . . . . . . . . . . .	P Near	 000000EA _TEXT	Length= 0000003F Public STDCALL
  ConvertLoop  . . . . . . . . .	L Near	 000000FB _TEXT	
  PopLoop  . . . . . . . . . . .	L Near	 0000010B _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
aveFeedback  . . . . . . . . . .	Byte	 00000260 _DATA	
ave  . . . . . . . . . . . . . .	DWord	 0000039B _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
closingMessage . . . . . . . . .	Byte	 00000271 _DATA	
comma  . . . . . . . . . . . . .	Byte	 00000394 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorPromptHigh  . . . . . . . .	Byte	 00000168 _DATA	
errorPromptNotUS . . . . . . . .	Byte	 000001BD _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputFeedback  . . . . . . . . .	Byte	 0000021F _DATA	
introduction01 . . . . . . . . .	Byte	 00000000 _DATA	
introduction02 . . . . . . . . .	Byte	 00000058 _DATA	
introduction03 . . . . . . . . .	Byte	 00000085 _DATA	
introduction04 . . . . . . . . .	Byte	 000000CB _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listArr  . . . . . . . . . . . .	DWord	 0000039F _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numPrompt  . . . . . . . . . . .	Byte	 00000146 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
strbuffer  . . . . . . . . . . .	Byte	 00000285 _DATA	
stringTemp . . . . . . . . . . .	Byte	 00000384 _DATA	
sumFeedback  . . . . . . . . . .	Byte	 00000242 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000397 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
